// Generated by CoffeeScript 1.7.1
var colorPalette, counter, generateFillerSeries, graph, isRegistered, mappedClasses, receiveObjectData, seriesData, tryQtBridge;

counter = 0;

mappedClasses = [];

colorPalette = new Rickshaw.Color.Palette();

seriesData = [
  {
    color: colorPalette.color(),
    data: [
      {
        x: 0,
        y: 0
      }
    ],
    name: ''
  }
];

generateFillerSeries = function(count) {
  var dummyData, num, _i, _ref;
  if (count === 0) {
    return [];
  }
  dummyData = [];
  for (num = _i = 0, _ref = count - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; num = 0 <= _ref ? ++_i : --_i) {
    dummyData.push({
      x: num,
      y: 0
    });
  }
  return dummyData;
};

isRegistered = function(klass) {
  var names;
  names = mappedClasses.filter(function(element) {
    return element.name === klass;
  });
  return names.length;
};

receiveObjectData = function(objectData) {
  var count, fillerSeries, klass, newColor, series, _i, _j, _len, _len1;
  for (klass in objectData) {
    count = objectData[klass];
    if (isRegistered(klass)) {
      for (_i = 0, _len = seriesData.length; _i < _len; _i++) {
        series = seriesData[_i];
        if (series.name === klass) {
          series.data.push({
            x: counter,
            y: count
          });
        } else {
          series.data.push({
            x: counter,
            y: 0
          });
        }
      }
    } else {
      newColor = colorPalette.color();
      mappedClasses.push({
        color: newColor,
        name: klass
      });
      fillerSeries = generateFillerSeries(counter);
      fillerSeries.push({
        x: counter,
        y: count
      });
      seriesData.push({
        color: newColor,
        data: fillerSeries,
        name: klass
      });
      for (_j = 0, _len1 = seriesData.length; _j < _len1; _j++) {
        series = seriesData[_j];
        if (series.data.length < counter) {
          series.data.push({
            x: counter,
            y: 0
          });
        }
      }
    }
  }
  return counter += 1;
};

graph = new Rickshaw.Graph({
  element: document.querySelector('#chart'),
  width: document.width - 30,
  height: document.height - 30,
  renderer: 'area',
  series: seriesData
});

new Rickshaw.Graph.Axis.Time({
  graph: graph
});

new Rickshaw.Graph.Axis.Y({
  graph: graph
});

tryQtBridge = function() {
  if (window.rbkitClient) {
    window.rbkitClient.sendDatatoJs.connect(receiveObjectData);
    return graph.render();
  }
};

setInterval(tryQtBridge, 1000);
