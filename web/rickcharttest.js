// Generated by CoffeeScript 1.7.1
var colorPalette, counter, data, findSeriesFor, graph, isRegistered, mappedClasses, receiveObjectData, seriesData, tryQtBridge;

counter = 0;

data = [
  {
    x: 0,
    y: 0
  }
];

mappedClasses = [];

colorPalette = new Rickshaw.Color.Palette();

seriesData = [
  {
    color: colorPalette.color(),
    data: [
      {
        x: 0,
        y: 0
      }
    ],
    name: ''
  }
];

findSeriesFor = function(klass) {
  var color, colors, series;
  colors = mappedClasses.filter(function(element) {
    return element.klass === klass;
  });
  color = colors[0].color;
  series = seriesData.filter(function(element) {
    return element.color === color;
  });
  return series[0];
};

isRegistered = function(klass) {
  var names;
  names = mappedClasses.filter(function(element) {
    return element.klass === klass;
  });
  return names.length;
};

receiveObjectData = function(objectData) {
  var count, dataArray, klass, newColor;
  console.log('receiving data');
  for (klass in objectData) {
    count = objectData[klass];
    if (isRegistered(klass)) {
      dataArray = findSeriesFor(klass);
      console.log("the color for data array is " + dataArray.color);
      dataArray.data.push({
        x: counter,
        y: count
      });
    } else {
      console.log('Got an new Class, pushing to mapped Classes');
      newColor = colorPalette.color();
      mappedClasses.push({
        klass: klass,
        color: newColor,
        name: klass
      });
      seriesData.push({
        color: newColor,
        data: [
          {
            x: counter,
            y: count
          }
        ],
        name: klass
      });
    }
  }
  console.log("incrementing counter to " + counter);
  return counter += 1;
};

graph = new Rickshaw.Graph({
  element: document.querySelector('#chart'),
  width: document.width - 30,
  height: document.height - 30,
  renderer: 'line',
  series: seriesData
});

new Rickshaw.Graph.Axis.Time({
  graph: graph
});

new Rickshaw.Graph.Axis.Y({
  graph: graph
});

tryQtBridge = function() {
  if (window.rbkitClient) {
    window.rbkitClient.sendDatatoJs.connect(receiveObjectData);
    return graph.render();
  }
};

setInterval(tryQtBridge, 100);
