// Generated by CoffeeScript 1.7.1
var charter, grapher,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

this.Graph = (function() {
  function Graph(element) {
    this.renderGraphAndLegend = __bind(this.renderGraphAndLegend, this);
    this.addData = __bind(this.addData, this);
    this.renderLegend = __bind(this.renderLegend, this);
    this.renderAxes = __bind(this.renderAxes, this);
    this.init = __bind(this.init, this);
    this.element = element;
    this.colorPalette = new Rickshaw.Color.Palette();
  }

  Graph.prototype.init = function() {
    this.graph = new Rickshaw.Graph({
      element: document.querySelector(this.element),
      width: document.width - 50,
      height: document.height - 150,
      renderer: 'bar',
      stack: true,
      gapSize: 0.5,
      series: new Rickshaw.Series.FixedDuration([
        {
          name: 'baseline'
        }
      ], this.colorPalette, {
        timeInterval: 1000,
        maxDataPoints: 15
      })
    });
    return this.renderAxes();
  };

  Graph.prototype.renderAxes = function() {
    new Rickshaw.Graph.Axis.Time({
      graph: this.graph
    }).render();
    new Rickshaw.Graph.Axis.Y.Scaled({
      graph: this.graph,
      tickFormat: Rickshaw.Fixtures.Number.formatKMBT,
      scale: d3.scale.linear()
    }).render();
    return new Rickshaw.Graph.HoverDetail({
      graph: this.graph,
      yFormatter: function(y) {
        return "Count: " + y;
      }
    });
  };

  Graph.prototype.renderLegend = function() {
    this.legend = new Rickshaw.Graph.Legend({
      graph: this.graph,
      element: document.getElementById('legend')
    });
    new Rickshaw.Graph.Behavior.Series.Toggle({
      graph: this.graph,
      legend: this.legend
    });
    new Rickshaw.Graph.Behavior.Series.Order({
      graph: this.graph,
      legend: this.legend
    });
    return new Rickshaw.Graph.Behavior.Series.Highlight({
      graph: this.graph,
      legend: this.legend
    });
  };

  Graph.prototype.addData = function(item) {
    return this.graph.series.addData(item);
  };

  Graph.prototype.renderGraphAndLegend = function() {
    this.graph.render();
    if (this.legend) {
      return this.legend.render();
    } else {
      this.graph.series.shift();
      return this.renderLegend();
    }
  };

  return Graph;

})();

this.Charter = (function() {
  function Charter(grapher) {
    this.tryQtBridge = __bind(this.tryQtBridge, this);
    this.receiveObjectData = __bind(this.receiveObjectData, this);
    this.grapher = grapher;
  }

  Charter.prototype.receiveObjectData = function(objectData) {
    switch (objectData.event_type) {
      case 'object_stats':
        this.grapher.addData(objectData.payload);
    }
    return this.grapher.renderGraphAndLegend();
  };

  Charter.prototype.tryQtBridge = function() {
    var _ref;
    return (_ref = window.jsBridge) != null ? _ref.jsEvent.connect(this.receiveObjectData) : void 0;
  };

  return Charter;

})();

grapher = new Graph('#chart');

grapher.init();

charter = new Charter(grapher);

setTimeout(charter.tryQtBridge, 1000);
