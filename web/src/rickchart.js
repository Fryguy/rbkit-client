// Generated by CoffeeScript 1.7.1
var charter, grapher,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

this.Graph = (function() {
  function Graph(element) {
    this.addData = __bind(this.addData, this);
    this.addItem = __bind(this.addItem, this);
    this.init = __bind(this.init, this);
    this.element = element;
    this.colorPalette = new Rickshaw.Color.Palette();
  }

  Graph.prototype.init = function() {
    this.graph = new Rickshaw.Graph({
      element: document.querySelector(this.element),
      width: document.width - 30,
      height: document.height - 30,
      renderer: 'bar',
      series: new Rickshaw.Series.FixedDuration([
        {
          name: '',
          color: this.colorPalette.color()
        }
      ], void 0, {
        timeInterval: 100,
        maxDataPoints: 100,
        timeBase: new Date().getTime() / 1000
      })
    });
    new Rickshaw.Graph.Axis.Time({
      graph: this.graph
    });
    new Rickshaw.Graph.Axis.Y.Scaled({
      graph: this.graph,
      tickFormat: Rickshaw.Fixtures.Number.formatKMBT,
      scale: d3.scale.log()
    });
    return new Rickshaw.Graph.HoverDetail({
      graph: this.graph,
      yFormatter: function(y) {
        return "Count: " + y;
      }
    });
  };

  Graph.prototype.addItem = function(item) {
    console.log(item);
    return this.graph.series.addItem({
      name: item.name,
      color: this.colorPalette.color()
    });
  };

  Graph.prototype.addData = function(item) {
    console.log(item);
    return this.graph.series.addData(item);
  };

  return Graph;

})();

this.Charter = (function() {
  Charter.prototype.mappedClasses = [];

  function Charter(grapher) {
    this.notMappedClasses = __bind(this.notMappedClasses, this);
    this.tryQtBridge = __bind(this.tryQtBridge, this);
    this.receiveObjectData = __bind(this.receiveObjectData, this);
    this.grapher = grapher;
  }

  Charter.prototype.receiveObjectData = function(objectData) {
    var klass, unMappedClasses, _i, _len;
    unMappedClasses = this.notMappedClasses(objectData, this.mappedClasses);
    for (_i = 0, _len = unMappedClasses.length; _i < _len; _i++) {
      klass = unMappedClasses[_i];
      try {
        this.grapher.addItem({
          name: klass
        });
        this.mappedClasses.push(klass);
      } catch (_error) {
        console.log(_error);
      }
    }
    return this.grapher.addData(objectData);
  };

  Charter.prototype.tryQtBridge = function() {
    if (window.rbkitClient) {
      window.rbkitClient.sendDatatoJs.connect(this.receiveObjectData);
      return this.grapher.graph.render();
    }
  };

  Charter.prototype.notMappedClasses = function(objectData, mappedClasses) {
    var klasses;
    klasses = Object.keys(objectData);
    return klasses.filter((function(_this) {
      return function(element) {
        return _this.mappedClasses.indexOf(element) < 0;
      };
    })(this));
  };

  return Charter;

})();

grapher = new Graph('#chart');

grapher.init();

charter = new Charter(grapher);

setInterval(charter.tryQtBridge, 1000);
