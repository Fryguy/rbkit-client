// Generated by CoffeeScript 1.7.1
var allCapturedSeries, findSeries, graph, palette, receiveObjectData, ticksTreatment, yAxis;

palette = new Rickshaw.Color.Palette({
  scheme: 'classic9'
});

this.SeriesData = (function() {
  function SeriesData(objCount, className, color, counter) {
    this.data = objCount;
    this.className = className;
    this.color = color || palette.color();
    this.counter = counter;
  }

  SeriesData.prototype.toHash = function() {
    var data;
    data = new Object();
    data.x = this.counter;
    data.y = this.data;
    return {
      color: this.color,
      data: [data],
      name: this.className
    };
  };

  return SeriesData;

})();

allCapturedSeries = [
  {
    color: palette.color(),
    data: [
      {
        x: 0,
        y: 0
      }
    ],
    name: 'none'
  }
];

this.Graph = (function() {
  function Graph(element, allCapturedSeries) {
    this.element = document.getElementById(element);
    this.allCapturedSeries = allCapturedSeries;
  }

  Graph.prototype.init = function() {
    var hash;
    hash = {
      element: this.element,
      width: '750',
      height: 450,
      renderer: 'bar',
      stroke: true,
      preserve: true,
      series: this.allCapturedSeries
    };
    this.graph = new Rickshaw.Graph(hash);
    debugger;
  };

  Graph.prototype.render = function() {
    return this.graph.render();
  };

  Graph.prototype.update = function() {
    return this.graph.update();
  };

  return Graph;

})();

graph = new this.Graph('#chart', allCapturedSeries).init();

new Rickshaw.Graph.HoverDetail({
  graph: graph.graph,
  xFormatter: function(x) {
    return new Date(x * 1000).toString();
  }
});

new Rickshaw.Graph.Annotate({
  graph: graph.graph,
  element: document.getElementById('timeline')
});

ticksTreatment = 'glow';

new Rickshaw.Graph.Axis.Time({
  graph: graph.graph,
  ticksTreatment: ticksTreatment,
  timeFixture: new Rickshaw.Fixtures.Time.Local()
}).render();

yAxis = new Rickshaw.Graph.Axis.Y({
  graph: graph.graph,
  tickFormat: Rickshaw.Fixtures.Number.formatKMBT,
  ticksTreatment: ticksTreatment
}).render();

new Rickshaw.Graph.Axis.Time({
  graph: graph.graph,
  timeFixture: new Rickshaw.Fixtures.Time.Local(),
  ticksTreatment: ticksTreatment
}).render();

window.counter = 0;

receiveObjectData = function(objectData) {
  var className, count, dataToPush, seriesData, seriesToPushTo;
  console.log(objectData);
  for (className in objectData) {
    count = objectData[className];
    if (seriesToPushTo = findSeries(className)) {
      dataToPush = {
        x: counter,
        y: count
      };
      seriesToPushTo.data.push(dataToPush);
    } else {
      seriesData = new this.SeriesData(count, className, counter);
      allCapturedSeries.push(seriesData.toHash());
    }
  }
  window.counter += 1;
  return graph.update();
};

findSeries = function(className) {
  var filteredClasses;
  filteredClasses = allCapturedSeries.filter(function(element, index) {
    return element.className === className;
  });
  return filteredClasses[0];
};

this.tryQtBridge = function() {
  if (window.rbkitClient) {
    window.rbkitClient.sendDatatoJs.connect(receiveObjectData);
    return graph.render();
  }
};

window.qtBridgeHandler = setInterval(tryQtBridge, 1000);
