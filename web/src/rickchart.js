// Generated by CoffeeScript 1.7.1
var charter, grapher,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

this.Graph = (function() {
  function Graph(element) {
    this.updateGcStats = __bind(this.updateGcStats, this);
    this.renderGraphAndLegend = __bind(this.renderGraphAndLegend, this);
    this.addData = __bind(this.addData, this);
    this.initLegend = __bind(this.initLegend, this);
    this.renderHoverDetail = __bind(this.renderHoverDetail, this);
    this.renderAxes = __bind(this.renderAxes, this);
    this.init = __bind(this.init, this);
    this.element = element;
    this.colorPalette = new Rickshaw.Color.Palette();
  }

  Graph.prototype.init = function() {
    this.graph = new Rickshaw.Graph({
      element: document.querySelector(this.element),
      height: document.height - 150,
      renderer: 'bar',
      stack: true,
      gapSize: 0.5,
      series: new Rickshaw.Series.FixedDuration([
        {
          name: 'baseline'
        }
      ], this.colorPalette, {
        timeInterval: 1000,
        maxDataPoints: 15
      })
    });
    return this.renderAxes();
  };

  Graph.prototype.renderAxes = function() {
    new Rickshaw.Graph.Axis.Time({
      graph: this.graph
    }).render();
    return new Rickshaw.Graph.Axis.Y.Scaled({
      graph: this.graph,
      tickFormat: Rickshaw.Fixtures.Number.formatKMBT,
      scale: d3.scale.linear()
    }).render();
  };

  Graph.prototype.renderHoverDetail = function() {
    return new Rickshaw.Graph.HoverDetail({
      graph: this.graph,
      formatter: function(series, x, y) {
        var colorSwatch, count, name;
        name = '<div class="class-name">Class Name : <strong>' + series.name + '</strong></div>';
        count = '<div class="class-count">Class Count: <strong>' + parseInt(y) + '</strong></div>';
        colorSwatch = '<span class="class-color" style="background-color: ' + series.color + '"></span>';
        return '<div class="class-hoverdetail">' + colorSwatch + '<div class="class-metadata">' + name + count + '</div>' + '</div>';
      }
    });
  };

  Graph.prototype.initLegend = function() {
    var shelving;
    this.legend = new Rickshaw.Graph.Legend({
      graph: this.graph,
      element: document.getElementById('legend')
    });
    shelving = new Rickshaw.Graph.Behavior.Series.Toggle({
      graph: this.graph,
      legend: this.legend
    });
    new Rickshaw.Graph.Behavior.Series.Highlight({
      graph: this.graph,
      legend: this.legend
    });
    this.legend.shelving = shelving;
    return this.graph.series.legend = this.legend;
  };

  Graph.prototype.addData = function(item) {
    return this.graph.series.addData(item);
  };

  Graph.prototype.renderGraphAndLegend = function() {
    this.graph.render();
    this.renderHoverDetail();
    if (!this.legend) {
      return this.initLegend();
    }
  };

  Graph.prototype.updateGcStats = function(gcStats) {
    var importantFields, key, row, stats, value, _i, _len, _results;
    stats = $('#gcstats tbody');
    stats.empty();
    importantFields = ['count', 'minor_gc_count', 'major_gc_count', 'heap_length', 'heap_eden_page_length', 'heap_used', 'heap_live_slot', 'heap_free_slot', 'heap_swept_slot', 'old_object', 'old_object_limit', 'remembered_shady_object', 'total_allocated_object', 'total_freed_object'];
    _results = [];
    for (_i = 0, _len = importantFields.length; _i < _len; _i++) {
      key = importantFields[_i];
      value = gcStats[key];
      row = "<tr><td>" + key + "</td><td>" + value + "</td></tr>";
      _results.push(stats.append(row));
    }
    return _results;
  };

  return Graph;

})();

this.Charter = (function() {
  function Charter(grapher) {
    this.tryQtBridge = __bind(this.tryQtBridge, this);
    this.receiveObjectData = __bind(this.receiveObjectData, this);
    this.grapher = grapher;
  }

  Charter.prototype.receiveObjectData = function(objectData) {
    switch (objectData.event_type) {
      case 'object_stats':
        this.grapher.addData(objectData.payload);
        break;
      case "gc_stats":
        this.grapher.updateGcStats(objectData.payload);
    }
    return this.grapher.renderGraphAndLegend();
  };

  Charter.prototype.tryQtBridge = function() {
    var _ref;
    return (_ref = window.jsBridge) != null ? _ref.jsEvent.connect(this.receiveObjectData) : void 0;
  };

  return Charter;

})();

grapher = new Graph('#chart');

grapher.init();

charter = new Charter(grapher);

setTimeout(charter.tryQtBridge, 1000);
